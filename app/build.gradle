import java.text.DecimalFormat

apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "ru.mobnius.vote"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName getVersion()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", getVersion())
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

greendao {
    schemaVersion 1
}

repositories {
    maven {
        url "http://maven.google.com/"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.github.nkzawa:socket.io-client:0.6.0'
    implementation 'org.greenrobot:greendao:3.2.2'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment:2.2.2'
    implementation 'androidx.navigation:navigation-ui:2.2.2'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.biometric:biometric:1.0.1'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.test.espresso:espresso-idling-resource:3.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:rules:1.3.0-rc01'
}

static def startOfDay() {
    def now = new Date().getTime()
    def start = Date.parse("yyyy-MM-dd hh:mm:ss", "2020-03-24 0:00:00").getTime()

    return new DecimalFormat("#").format(Math.floor(Math.abs(now - start) / (1000 * 3600 * 24)))
}

static def minuteOfDay() {
    def now = new Date()
    return (now.format("HH").toInteger() * 60) + now.format("mm").toInteger()
}

static def getRelease() {
    /**
     * 0 – альфа (прототип);
     * 1 – бета (бета);
     * 2 – выпуск-кандидат (передан на тестирование заказчику);
     * 3 – публичный выпуск (окончательно передан заказчику).
     */
    return 1
}

static def getVersion() {
    return "1." + startOfDay() + "." + getRelease() + "." + minuteOfDay()
}
